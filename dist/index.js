!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r=t();for(var s in r)("object"==typeof exports?exports:e)[s]=r[s]}}(window,function(){return function(e){var t={};function r(s){if(t[s])return t[s].exports;var o=t[s]={i:s,l:!1,exports:{}};return e[s].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(s,o,function(t){return e[t]}.bind(null,o));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(1),o=r(3);t.preprocess=((e,r)=>(e.stylesheet.rules=t.process(e),r())),t.process=(e=>new s.default(e.stylesheet.rules).resolve()),t.proccessLint=(e=>(e.stylesheet.rules=t.process(e),o.lint(e))),t.name="BEM"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(2);class o{constructor(e){this.rules=e}resolve(){let e=[];return this.rules.forEach(t=>{if(o.isNotMediaQuery(t)&&o.isRule(t)){this.flattenRules([t]).map(t=>{e.push(this.getRuleWithBemDeclarations(t))})}else t.rules=this.flattenRules(t.rules),t.rules=t.rules.map(e=>this.getRuleWithBemDeclarations(e)),e.push(t)}),e}flattenRules(e){let t=[];return e?(e.forEach(e=>{e.selectors&&e.selectors.forEach(r=>{const s={type:e.type,selectors:[r],declarations:e.declarations,position:e.position};t.push(s)})}),t):t}static isNotMediaQuery(e){return"media"!=e.type}static isRule(e){return"rule"==e.type}getRuleWithBemDeclarations(e){const t=[];if(e.selectors.forEach(e=>{o.isCssClass(e)&&(e=o.getLastPartOfCssClass(e),t.push(e))}),t.length<1)return e;const r=s.default.parse(t[0]);return r?(e.declarations=e.declarations.concat(r.map(e=>({type:"declaration",property:"x-should",value:`match '${e}'`}))),e):e}static isCssClass(e){return e.match(/(\.\S+)/g)}static getLastPartOfCssClass(e){return"."+e.split(".").filter(Boolean).pop()}}t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{static parse(e){let t=[];return t=s.getParts(e,t,s.isBemBlock(e),s.getBlockParam),t=s.getParts(e,t,s.isBemModifier(e),s.getModifierParam)}static getParts(e,t,r,s){if(!r)return t;return e.split(".").filter(Boolean).forEach(e=>{(e=s(e))&&-1===t.indexOf(e)&&t.push(e)}),t}static getBlockParam(e){const t=/\S+?(?=__)/g;return e.match(t)&&"."+e.match(t)[0]+" *"}static getModifierParam(e){const t=/\S+?(?=--)/g;return e.match(t)&&"."+e.match(t)[0]}static isBemBlock(e){return!!e.match(/\w+__\w+/g)}static isBemModifier(e){return!!e.match(/\w+--\w+/g)}}t.default=s},function(e,t,r){"use strict";function s(e,t,r){if("rule"===e.type){if(!e.selectors)return;t.push(e.selectors[0]),e.declarations.forEach(e=>{if("x-should"===e.property){let s=e.value.match(/(?=\.)(.*)(?=')/g)[0].match(/(\.\w+)/g);s[0]&&t.indexOf(s[0])&&-1===r.indexOf(s[0])&&r.push(s[0])}})}}Object.defineProperty(t,"__esModule",{value:!0}),t.lint=function(e){let t=[],r=[];return e.stylesheet.rules.forEach(e=>{s(e,t,r),"media"===e.type&&e.rules.forEach(e=>{s(e,t,r)})}),r.filter(e=>t.indexOf(e)<0)}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1J1bGVzUmVzb2x2ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0JlbVBhcnNlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGludC50cyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJhIiwiaSIsIndpbmRvdyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlJ1bGVzUmVzb2x2ZXJfMSIsImxpbnRfMSIsInByZXByb2Nlc3MiLCJjdHgiLCJuZXh0Iiwic3R5bGVzaGVldCIsInJ1bGVzIiwicHJvY2VzcyIsImRlZmF1bHQiLCJyZXNvbHZlIiwicHJvY2Nlc3NMaW50IiwibGludCIsIkJlbVBhcnNlcl8xIiwiUnVsZXNSZXNvbHZlciIsIltvYmplY3QgT2JqZWN0XSIsInRoaXMiLCJyZXN1bHQiLCJmb3JFYWNoIiwicnVsZSIsImlzTm90TWVkaWFRdWVyeSIsImlzUnVsZSIsImZsYXR0ZW5SdWxlcyIsIm1hcCIsInB1c2giLCJnZXRSdWxlV2l0aEJlbURlY2xhcmF0aW9ucyIsInJlc3VsdHMiLCJzZWxlY3RvcnMiLCJzZWxlY3RvciIsIm5ld1J1bGUiLCJ0eXBlIiwiZGVjbGFyYXRpb25zIiwicG9zaXRpb24iLCJzZWxlY3RvcnNXaXRoQ3NzQ2xhc3MiLCJpc0Nzc0NsYXNzIiwiZ2V0TGFzdFBhcnRPZkNzc0NsYXNzIiwibGVuZ3RoIiwicGFyYW1zIiwicGFyc2UiLCJjb25jYXQiLCJwYXJhbSIsIm1hdGNoIiwic3BsaXQiLCJmaWx0ZXIiLCJCb29sZWFuIiwicG9wIiwiQmVtUGFyc2VyIiwiY2xhc3NOYW1lIiwic2hvdWxkQmVQYXJ0T2YiLCJnZXRQYXJ0cyIsImlzQmVtQmxvY2siLCJnZXRCbG9ja1BhcmFtIiwiaXNCZW1Nb2RpZmllciIsImdldE1vZGlmaWVyUGFyYW0iLCJiZW1UeXBlIiwiZ2V0UGFyYW0iLCJwYXJ0IiwiaW5kZXhPZiIsImJsb2NrUGF0dGVybiIsIm1vZGlmaWVyUGF0dGVybiIsImRldGVjdE1pc3NpbmdDbGFzc2VzIiwiZm91bmRDbGFzc2VzIiwiZGVjbGFyYXRpb24iLCJjc3MiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0Esb0JBQUFDLFNBQUEsaUJBQUFDLE9BQ0FBLE9BQUFELFFBQUFELFNBQ0Esc0JBQUFHLGVBQUFDLElBQ0FELE9BQUEsR0FBQUgsT0FDQSxDQUNBLElBQUFLLEVBQUFMLElBQ0EsUUFBQU0sS0FBQUQsR0FBQSxpQkFBQUosZ0JBQUFGLEdBQUFPLEdBQUFELEVBQUFDLElBUEEsQ0FTQ0MsT0FBQSxXQUNELG1CQ1RBLElBQUFDLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQVQsUUFHQSxJQUFBQyxFQUFBTSxFQUFBRSxHQUFBLENBQ0FKLEVBQUFJLEVBQ0FDLEdBQUEsRUFDQVYsUUFBQSxJQVVBLE9BTkFXLEVBQUFGLEdBQUFHLEtBQUFYLEVBQUFELFFBQUFDLElBQUFELFFBQUFRLEdBR0FQLEVBQUFTLEdBQUEsRUFHQVQsRUFBQUQsUUEwREEsT0FyREFRLEVBQUFLLEVB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LE1BQU1pQixHQUFjLEdBQUssS0FHN0UzQyx3QkFBd0JnQyxHQUM1QixNQUFNWSxFQUEyQixjQUVqQyxPQUFPWixFQUFVTixNQUFNa0IsSUFBb0IsSUFBTVosRUFBVU4sTUFBTWtCLEdBQWlCLEdBRzlFNUMsa0JBQWtCZ0MsR0FHdEIsUUFBT0EsRUFBVU4sTUFGYSxhQUsxQjFCLHFCQUFxQmdDLEdBR3pCLFFBQU9BLEVBQVVOLE1BRmdCLGNBcER6Q2pGLEVBQUFpRCxRQUFBcUMsZ0NDc0JBLFNBQUFjLEVBQThCekMsRUFBWVEsRUFBMEJrQyxHQUNoRSxHQUFrQixTQUFkMUMsRUFBS1csS0FBaUIsQ0FDdEIsSUFBS1gsRUFBS1EsVUFDTixPQUdKQSxFQUFVSCxLQUFLTCxFQUFLUSxVQUFVLElBQzlCUixFQUFLWSxhQUFhYixRQUFTNEMsSUFDdkIsR0FBNkIsYUFBekJBLEVBQVlsRSxTQUF5QixDQUNyQyxJQUNJbUQsRUFEb0NlLEVBQVk1RSxNQUFNdUQsTUFBTSxvQkFDZCxHQUFHQSxNQUFNLFlBRXZETSxFQUFVLElBQ05wQixFQUFVOEIsUUFBUVYsRUFBVSxNQUNZLElBQXhDYyxFQUFhSixRQUFRVixFQUFVLEtBQWNjLEVBQWFyQyxLQUFLdUIsRUFBVSx5REFqQ2pHdkYsRUFBQW9ELEtBQUEsU0FBcUJtRCxHQUNqQixJQUFJcEMsRUFBMkIsR0FDM0JrQyxFQUE4QixHQVlsQyxPQVZBRSxFQUFJekQsV0FBV0MsTUFBTVcsUUFBU0MsSUFDMUJ5QyxFQUFxQnpDLEVBQU1RLEVBQVdrQyxHQUVwQixVQUFkMUMsRUFBS1csTUFDTFgsRUFBS1osTUFBTVcsUUFBU0MsSUFDaEJ5QyxFQUFxQnpDLEVBQU1RLEVBQVdrQyxPQUszQ0EsRUFBYWxCLE9BQVE5RSxHQUNqQjhELEVBQVU4QixRQUFRNUYsR0FBSyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImltcG9ydCBSdWxlc1Jlc29sdmVyIGZyb20gJy4vUnVsZXNSZXNvbHZlcic7XG5pbXBvcnQgeyBSdWxlLCBTdHlsZXNoZWV0fSBmcm9tICdjc3MnO1xuaW1wb3J0IHtNZWRpYVF1ZXJ5SW50ZXJmYWNlfSBmcm9tIFwiLi9NZWRpYVF1ZXJ5SW50ZXJmYWNlXCI7XG5pbXBvcnQge2xpbnR9IGZyb20gJy4vbGludCc7XG5cbmV4cG9ydCBjb25zdCBwcmVwcm9jZXNzOiBGdW5jdGlvbiA9IChjdHg6IFN0eWxlc2hlZXQsIG5leHQ6IEZ1bmN0aW9uKTogRnVuY3Rpb24gPT4ge1xuICAgIGN0eC5zdHlsZXNoZWV0LnJ1bGVzID0gcHJvY2VzcyhjdHgpO1xuXG4gICAgcmV0dXJuIG5leHQoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9jZXNzID0gKGN0eDogU3R5bGVzaGVldCk6IEFycmF5PFJ1bGUgfCBNZWRpYVF1ZXJ5SW50ZXJmYWNlPiA9PiB7XG4gICAgcmV0dXJuIChuZXcgUnVsZXNSZXNvbHZlcihjdHguc3R5bGVzaGVldC5ydWxlcykpLnJlc29sdmUoKTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9jY2Vzc0xpbnQgPSAoY3R4OiBTdHlsZXNoZWV0KTogQXJyYXk8c3RyaW5nPiA9PiB7XG4gICAgY3R4LnN0eWxlc2hlZXQucnVsZXMgPSBwcm9jZXNzKGN0eCk7XG5cbiAgICByZXR1cm4gbGludChjdHgpO1xufTtcblxuXG5leHBvcnQgY29uc3QgbmFtZTogc3RyaW5nID0gJ0JFTSc7XG4iLCJpbXBvcnQgQmVtUGFyc2VyIGZyb20gJy4vQmVtUGFyc2VyJztcbmltcG9ydCB7TWVkaWFRdWVyeUludGVyZmFjZX0gZnJvbSAnLi9NZWRpYVF1ZXJ5SW50ZXJmYWNlJztcbmltcG9ydCB7QXRSdWxlLCBDb21tZW50LCBSdWxlfSBmcm9tICdjc3MnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFhzaG91bGREZWNsYXJhdGlvbkludGVyZmFjZSB7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHByb3BlcnR5OiBzdHJpbmc7XG4gICAgdmFsdWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnVsZXNSZXNvbHZlciB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBydWxlczogQXJyYXk8UnVsZSB8IENvbW1lbnQgfCBBdFJ1bGU+KSB7XG4gICAgfVxuXG4gICAgcHVibGljIHJlc29sdmUoKTogQXJyYXk8UnVsZSB8IE1lZGlhUXVlcnlJbnRlcmZhY2U+IHtcbiAgICAgICAgbGV0IHJlc3VsdDogQXJyYXk8UnVsZSB8IE1lZGlhUXVlcnlJbnRlcmZhY2U+ID0gW107XG5cbiAgICAgICAgdGhpcy5ydWxlcy5mb3JFYWNoKChydWxlOiBhbnkpOiB2b2lkID0+IHtcbiAgICAgICAgICAgIGlmIChSdWxlc1Jlc29sdmVyLmlzTm90TWVkaWFRdWVyeShydWxlKSAmJiBSdWxlc1Jlc29sdmVyLmlzUnVsZShydWxlKSkge1xuICAgICAgICAgICAgICAgIGxldCBydWxlcyA9IHRoaXMuZmxhdHRlblJ1bGVzKFtydWxlXSk7XG5cbiAgICAgICAgICAgICAgICBydWxlcy5tYXAoKHJ1bGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5nZXRSdWxlV2l0aEJlbURlY2xhcmF0aW9ucyhydWxlKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJ1bGUucnVsZXMgPSB0aGlzLmZsYXR0ZW5SdWxlcyhydWxlLnJ1bGVzKTtcblxuICAgICAgICAgICAgcnVsZS5ydWxlcyA9IHJ1bGUucnVsZXMubWFwKChydWxlKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UnVsZVdpdGhCZW1EZWNsYXJhdGlvbnMocnVsZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmVzdWx0LnB1c2gocnVsZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmbGF0dGVuUnVsZXMocnVsZXM6IEFycmF5PFJ1bGU+KTogQXJyYXk8UnVsZT4ge1xuICAgICAgICBsZXQgcmVzdWx0czogQXJyYXk8UnVsZT4gPSBbXTtcblxuICAgICAgICBpZiAoIXJ1bGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgfVxuXG4gICAgICAgIHJ1bGVzLmZvckVhY2goKHJ1bGUpOiB2b2lkID0+IHtcbiAgICAgICAgICAgIGlmICghcnVsZS5zZWxlY3RvcnMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJ1bGUuc2VsZWN0b3JzLmZvckVhY2goKHNlbGVjdG9yKTogdm9pZCA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3UnVsZTogUnVsZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogcnVsZS50eXBlLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnM6IFtzZWxlY3Rvcl0sXG4gICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uczogcnVsZS5kZWNsYXJhdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBydWxlLnBvc2l0aW9uXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChuZXdSdWxlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBpc05vdE1lZGlhUXVlcnkocnVsZTogTWVkaWFRdWVyeUludGVyZmFjZSB8IFJ1bGUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHJ1bGUudHlwZSAhPSAnbWVkaWEnO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGlzUnVsZShydWxlOiBNZWRpYVF1ZXJ5SW50ZXJmYWNlIHwgUnVsZSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gcnVsZS50eXBlID09ICdydWxlJztcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldFJ1bGVXaXRoQmVtRGVjbGFyYXRpb25zKHJ1bGU6IFJ1bGUpOiBSdWxlIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0b3JzV2l0aENzc0NsYXNzOiBBcnJheTxzdHJpbmc+ID0gW107XG5cbiAgICAgICAgcnVsZS5zZWxlY3RvcnMuZm9yRWFjaCgoc2VsZWN0b3IpOiB2b2lkID0+IHtcbiAgICAgICAgICAgIGlmIChSdWxlc1Jlc29sdmVyLmlzQ3NzQ2xhc3Moc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBSdWxlc1Jlc29sdmVyLmdldExhc3RQYXJ0T2ZDc3NDbGFzcyhzZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzV2l0aENzc0NsYXNzLnB1c2goc2VsZWN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoc2VsZWN0b3JzV2l0aENzc0NsYXNzLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBydWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyYW1zOiBBcnJheTxzdHJpbmc+ID0gQmVtUGFyc2VyLnBhcnNlKHNlbGVjdG9yc1dpdGhDc3NDbGFzc1swXSk7XG5cbiAgICAgICAgaWYgKCFwYXJhbXMpIHtcbiAgICAgICAgICAgIHJldHVybiBydWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcnVsZS5kZWNsYXJhdGlvbnMgPSBydWxlLmRlY2xhcmF0aW9ucy5jb25jYXQocGFyYW1zLm1hcCgocGFyYW0pOiBYc2hvdWxkRGVjbGFyYXRpb25JbnRlcmZhY2UgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAnZGVjbGFyYXRpb24nLCBwcm9wZXJ0eTogJ3gtc2hvdWxkJywgdmFsdWU6IGBtYXRjaCAnJHtwYXJhbX0nYH07XG4gICAgICAgIH0pKTtcblxuICAgICAgICByZXR1cm4gcnVsZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBpc0Nzc0NsYXNzKHNlbGVjdG9yOiBzdHJpbmcpOiBSZWdFeHBNYXRjaEFycmF5IHtcbiAgICAgICAgY29uc3QgcGF0dGVybjogUmVnRXhwID0gLyhcXC5cXFMrKS9nO1xuXG4gICAgICAgIHJldHVybiBzZWxlY3Rvci5tYXRjaChwYXR0ZXJuKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBnZXRMYXN0UGFydE9mQ3NzQ2xhc3Moc2VsZWN0b3I6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IHBhcnRzOiBBcnJheTxzdHJpbmc+ID0gc2VsZWN0b3Iuc3BsaXQoJy4nKS5maWx0ZXIoQm9vbGVhbik7XG5cbiAgICAgICAgcmV0dXJuICcuJyArIHBhcnRzLnBvcCgpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEJlbVBhcnNlciB7XG4gICAgcHVibGljIHN0YXRpYyBwYXJzZShjbGFzc05hbWUgOiBzdHJpbmcpIDogQXJyYXk8c3RyaW5nPiB7XG4gICAgICAgIGxldCBzaG91bGRCZVBhcnRPZiA6IEFycmF5PHN0cmluZz4gPSBbXTtcblxuICAgICAgICBzaG91bGRCZVBhcnRPZiA9IEJlbVBhcnNlci5nZXRQYXJ0cyhcbiAgICAgICAgICAgIGNsYXNzTmFtZSwgc2hvdWxkQmVQYXJ0T2YsIEJlbVBhcnNlci5pc0JlbUJsb2NrKGNsYXNzTmFtZSksIEJlbVBhcnNlci5nZXRCbG9ja1BhcmFtXG4gICAgICAgICk7XG5cbiAgICAgICAgc2hvdWxkQmVQYXJ0T2YgPSBCZW1QYXJzZXIuZ2V0UGFydHMoXG4gICAgICAgICAgICBjbGFzc05hbWUsIHNob3VsZEJlUGFydE9mLCBCZW1QYXJzZXIuaXNCZW1Nb2RpZmllcihjbGFzc05hbWUpLCBCZW1QYXJzZXIuZ2V0TW9kaWZpZXJQYXJhbVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBzaG91bGRCZVBhcnRPZjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBnZXRQYXJ0cyhjbGFzc05hbWUgOiBzdHJpbmcsIHNob3VsZEJlUGFydE9mIDogQXJyYXk8c3RyaW5nPiwgYmVtVHlwZSA6IGJvb2xlYW4sIGdldFBhcmFtIDogRnVuY3Rpb24pIDogQXJyYXk8c3RyaW5nPiB7XG4gICAgICAgIGlmICghYmVtVHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNob3VsZEJlUGFydE9mO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFydHMgOiBBcnJheTxzdHJpbmc+ID0gY2xhc3NOYW1lLnNwbGl0KCcuJykuZmlsdGVyKEJvb2xlYW4pO1xuXG4gICAgICAgIHBhcnRzLmZvckVhY2goKHBhcnQpID0+IHtcbiAgICAgICAgICAgIHBhcnQgPSBnZXRQYXJhbShwYXJ0KTtcblxuICAgICAgICAgICAgaWYgKHBhcnQgJiYgc2hvdWxkQmVQYXJ0T2YuaW5kZXhPZihwYXJ0KSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRCZVBhcnRPZi5wdXNoKHBhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2hvdWxkQmVQYXJ0T2Y7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0QmxvY2tQYXJhbShjbGFzc05hbWUgOiBzdHJpbmcpIDogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgYmxvY2tQYXR0ZXJuIDogUmVnRXhwID0gL1xcUys/KD89X18pL2c7XG5cbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZS5tYXRjaChibG9ja1BhdHRlcm4pICYmICcuJyArIGNsYXNzTmFtZS5tYXRjaChibG9ja1BhdHRlcm4pWzBdICsgJyAqJztcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBnZXRNb2RpZmllclBhcmFtKGNsYXNzTmFtZSA6IHN0cmluZykgOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBtb2RpZmllclBhdHRlcm4gOiBSZWdFeHAgPSAvXFxTKz8oPz0tLSkvZztcblxuICAgICAgICByZXR1cm4gY2xhc3NOYW1lLm1hdGNoKG1vZGlmaWVyUGF0dGVybikgJiYgJy4nICsgY2xhc3NOYW1lLm1hdGNoKG1vZGlmaWVyUGF0dGVybilbMF07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgaXNCZW1CbG9jayhjbGFzc05hbWUgOiBzdHJpbmcpIDogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGJsb2NrUGF0dGVybiA6IFJlZ0V4cCA9IC9cXHcrX19cXHcrL2c7XG5cbiAgICAgICAgcmV0dXJuIGNsYXNzTmFtZS5tYXRjaChibG9ja1BhdHRlcm4pID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGlzQmVtTW9kaWZpZXIoY2xhc3NOYW1lIDogc3RyaW5nKSA6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBtb2RpZmllclBhdHRlcm4gOiBSZWdFeHAgPSAvXFx3Ky0tXFx3Ky9nO1xuXG4gICAgICAgIHJldHVybiBjbGFzc05hbWUubWF0Y2gobW9kaWZpZXJQYXR0ZXJuKSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG59XG4iLCJpbXBvcnQge01lZGlhLCBSdWxlLCBTdHlsZXNoZWV0fSBmcm9tIFwiY3NzXCI7XG5pbXBvcnQge1hzaG91bGREZWNsYXJhdGlvbkludGVyZmFjZX0gZnJvbSBcIi4vUnVsZXNSZXNvbHZlclwiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGludChjc3M6IFN0eWxlc2hlZXQpOiBBcnJheTxzdHJpbmc+IHtcbiAgICBsZXQgc2VsZWN0b3JzOiBBcnJheTxzdHJpbmc+ID0gW107XG4gICAgbGV0IGZvdW5kQ2xhc3NlczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuXG4gICAgY3NzLnN0eWxlc2hlZXQucnVsZXMuZm9yRWFjaCgocnVsZTogUnVsZSAmIE1lZGlhKSA9PiB7XG4gICAgICAgIGRldGVjdE1pc3NpbmdDbGFzc2VzKHJ1bGUsIHNlbGVjdG9ycywgZm91bmRDbGFzc2VzKTtcblxuICAgICAgICBpZiAocnVsZS50eXBlID09PSAnbWVkaWEnKSB7XG4gICAgICAgICAgICBydWxlLnJ1bGVzLmZvckVhY2goKHJ1bGU6IFJ1bGUpID0+IHtcbiAgICAgICAgICAgICAgICBkZXRlY3RNaXNzaW5nQ2xhc3NlcyhydWxlLCBzZWxlY3RvcnMsIGZvdW5kQ2xhc3Nlcyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZvdW5kQ2xhc3Nlcy5maWx0ZXIoKGk6IHN0cmluZykgPT4ge1xuICAgICAgICByZXR1cm4gc2VsZWN0b3JzLmluZGV4T2YoaSkgPCAwO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBkZXRlY3RNaXNzaW5nQ2xhc3NlcyhydWxlOiBSdWxlLCBzZWxlY3RvcnM6IEFycmF5PE9iamVjdD4sIGZvdW5kQ2xhc3NlczogQXJyYXk8c3RyaW5nPikge1xuICAgIGlmIChydWxlLnR5cGUgPT09ICdydWxlJykge1xuICAgICAgICBpZiAoIXJ1bGUuc2VsZWN0b3JzKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGVjdG9ycy5wdXNoKHJ1bGUuc2VsZWN0b3JzWzBdKTtcbiAgICAgICAgcnVsZS5kZWNsYXJhdGlvbnMuZm9yRWFjaCgoZGVjbGFyYXRpb246IFhzaG91bGREZWNsYXJhdGlvbkludGVyZmFjZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGRlY2xhcmF0aW9uLnByb3BlcnR5ID09PSAneC1zaG91bGQnKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJ1bGVEZWNsYXJhdGlvbjogUmVnRXhwTWF0Y2hBcnJheSA9IGRlY2xhcmF0aW9uLnZhbHVlLm1hdGNoKC8oPz1cXC4pKC4qKSg/PScpL2cpO1xuICAgICAgICAgICAgICAgIGxldCBjbGFzc05hbWU6IFJlZ0V4cE1hdGNoQXJyYXkgPSBydWxlRGVjbGFyYXRpb25bMF0ubWF0Y2goLyhcXC5cXHcrKS9nKTtcblxuICAgICAgICAgICAgICAgIGlmIChjbGFzc05hbWVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdG9ycy5pbmRleE9mKGNsYXNzTmFtZVswXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kQ2xhc3Nlcy5pbmRleE9mKGNsYXNzTmFtZVswXSkgPT09IC0xICYmIGZvdW5kQ2xhc3Nlcy5wdXNoKGNsYXNzTmFtZVswXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9