!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r=t();for(var s in r)("object"==typeof exports?exports:e)[s]=r[s]}}(window,function(){return function(e){var t={};function r(s){if(t[s])return t[s].exports;var l=t[s]={i:s,l:!1,exports:{}};return e[s].call(l.exports,l,l.exports,r),l.l=!0,l.exports}return r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var l in e)r.d(s,l,function(t){return e[t]}.bind(null,l));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{static parse(e){let t=[];return t=s.getParts(e,t,s.isBemBlock(e),s.getBlockParam),t=s.getParts(e,t,s.isBemModifier(e),s.getModifierParam)}static isBemBlock(e){return!!e.match(s.BLOCK_PATTERN)}static isBemModifier(e){return!!e.match(s.MODIFIER_PATTERN)}static getParts(e,t,r,s){if(!r)return t;return e.split(".").filter(Boolean).forEach(e=>{(e=s(e))&&!t.includes(e)&&t.push(e)}),t}static getBlockParam(e){const t=/\S+?(?=__)/g;return e.match(t)&&"."+e.match(t)[0]+" *"}static getModifierParam(e){const t=/\S+?(?=--)/g;return e.match(t)&&"."+e.match(t)[0]}}s.BLOCK_PATTERN=/\S+__\S+/g,s.MODIFIER_PATTERN=/\S+--\S+/g,t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(2),l=r(3),o=e=>new s.default(e.stylesheet.rules).resolve();t.preprocess=((e,t)=>(e.stylesheet.rules=o(e),t())),t.processLint=(e=>(e.stylesheet.rules=o(e),l.lint(e))),t.name="BEM"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0);class l{constructor(e){this.rules=e}resolve(){let e=[];return this.rules.forEach(t=>{if(l.isNotMediaQuery(t)&&l.isRule(t)){this.flattenRules([t]).map(t=>{e.push(this.getRuleWithBemDeclarations(t))})}else t.rules=this.flattenRules(t.rules),t.rules=t.rules.map(e=>this.getRuleWithBemDeclarations(e)),e.push(t)}),e}flattenRules(e){let t=[];return e?(e.forEach(e=>{e.selectors&&e.selectors.forEach(r=>{const s={type:e.type,selectors:[r],declarations:e.declarations,position:e.position};t.push(s)})}),t):t}static isNotMediaQuery(e){return"media"!==e.type}static isRule(e){return"rule"===e.type}getRuleWithBemDeclarations(e){const t=[];if(e.selectors.forEach(e=>{l.isCssClass(e)&&(e=l.getLastPartOfCssClass(e),t.push(e))}),t.length<1)return e;let r=s.default.parse(t[0]);return(r=l.removeInvalidMatches(r))?(e.declarations=e.declarations.concat(r.map(e=>({type:"declaration",property:"x-should",value:`match '${e}'`}))),e):e}static isCssClass(e){return!!e.match(/(\.\S+)/g)}static removeInvalidMatches(e){return e.filter(e=>!e.match(/\[.+/g))}static getLastPartOfCssClass(e){return"."+e.split(".").filter(Boolean).pop()}}t.default=l},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0);t.lint=(e=>{const{rules:t,isBemDetected:r}=l(e);return{rules:t.map(({rule:e,className:t})=>({missingClassName:t,selector:e.selectors[0]||""})),isValid:r&&0===t.length,isBemDetected:r}});const l=e=>{let t=[],r=[],s=[],l=[];return e.stylesheet.rules.forEach(e=>{o(e,t,r,s,l),"media"===e.type&&e.rules.forEach(e=>{o(e,t,r,s,l)})}),{rules:[...new Set(t)],isBemDetected:l.length>0}},o=(e,t,r,l,o)=>{if("rule"===e.type){const a=e.selectors[0],i=[...new Set([].concat(...a.split(".")).filter(e=>e).map(e=>`.${e}`))];l.push(...i),e.declarations.forEach(i=>{if("x-should"===i.property){o.push(a);const n=i.value.match(/(?=\.)(.*)(?=')/g)[0].match(/(\.\S+)/g)[0];if(((e,t,r)=>t.includes(r))(0,l,n))return;if(s.default.isBemModifier(a)&&s.default.isBemBlock(n)){const s=new RegExp(n,"g");a.match(s).length<=1&&(r.push(n),t.push({className:n,rule:e}))}!s.default.isBemBlock(a)||s.default.isBemModifier(n)||s.default.isBemBlock(n)||(r.push(n),t.push({className:n,rule:e}))}})}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,