!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r=t();for(var s in r)("object"==typeof exports?exports:e)[s]=r[s]}}(window,function(){return function(e){var t={};function r(s){if(t[s])return t[s].exports;var i=t[s]={i:s,l:!1,exports:{}};return e[s].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(s,i,function(t){return e[t]}.bind(null,i));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{static parse(e){let t=[];return t=s.getParts(e,t,s.isBemBlock(e),s.getBlockParam),t=s.getParts(e,t,s.isBemModifier(e),s.getModifierParam)}static isBemBlock(e){return!!e.match(s.BLOCK_PATTERN)}static isBemModifier(e){return!!e.match(s.MODIFIER_PATTERN)}static getParts(e,t,r,s){if(!r)return t;return e.split(".").filter(Boolean).forEach(e=>{(e=s(e))&&!t.includes(e)&&t.push(e)}),t}static getBlockParam(e){const t=/\S+?(?=__)/g;return e.match(t)&&"."+e.match(t)[0]+" *"}static getModifierParam(e){const t=/\S+?(?=--)/g;return e.match(t)&&"."+e.match(t)[0]}}s.BLOCK_PATTERN=/\S+__\S+/g,s.MODIFIER_PATTERN=/\S+--\S+/g,t.default=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(2),i=r(3),l=e=>new s.default(e.stylesheet.rules).resolve();t.preprocess=((e,t)=>(e.stylesheet.rules=l(e),t())),t.processLint=(e=>(e.stylesheet.rules=l(e),i.lint(e))),t.name="BEM"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0);class i{constructor(e){this.rules=e}resolve(){let e=[];return this.rules.forEach(t=>{if(i.isNotMediaQuery(t)&&i.isRule(t)){this.flattenRules([t]).map(t=>{e.push(this.getRuleWithBemDeclarations(t))})}else t.rules=this.flattenRules(t.rules),t.rules=t.rules.map(e=>this.getRuleWithBemDeclarations(e)),e.push(t)}),e}flattenRules(e){let t=[];return e?(e.forEach(e=>{e.selectors&&e.selectors.forEach(r=>{const s={type:e.type,selectors:[r],declarations:e.declarations,position:e.position};t.push(s)})}),t):t}static isNotMediaQuery(e){return"media"!==e.type}static isRule(e){return"rule"===e.type}getRuleWithBemDeclarations(e){const t=[];if(e.selectors.forEach(e=>{i.isCssClass(e)&&(e=i.getLastPartOfCssClass(e),t.push(e))}),t.length<1)return e;let r=s.default.parse(t[0]);return(r=i.removeInvalidMatches(r))?(e.declarations=e.declarations.concat(r.map(e=>({type:"declaration",property:"x-should",value:`match '${e}'`}))),e):e}static isCssClass(e){return!!e.match(/(\.\S+)/g)}static removeInvalidMatches(e){return e.filter(e=>!e.match(/\[.+/g))}static getLastPartOfCssClass(e){return"."+e.split(".").filter(Boolean).pop()}}t.default=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0);t.lint=(e=>{const{rules:t,isBemDetected:r}=i(e);return{rules:t.map(({rule:e,className:t})=>({missingClassName:t,selector:e.selectors[0]||""})),isValid:r&&0===t.length,isBemDetected:r}});const i=e=>{let t=[],r=[],s=[],i=[];return e.stylesheet.rules.forEach(e=>{l(e,t,r,s,i),"media"===e.type&&e.rules.forEach(e=>{l(e,t,r,s,i)})}),{rules:[...new Set(t)],isBemDetected:i.length>0}},l=(e,t,r,i,l)=>{if("rule"===e.type){const o=e.selectors[0],a=[...new Set([].concat(...o.split(".")).filter(e=>e).map(e=>`.${e}`))];i.push(...a),e.declarations.forEach(a=>{if("x-should"===a.property){l.push(o);const n=a.value.match(/(?=\.)(.*)(?=')/g)[0].match(/(\.\S+)/g)[0];if(((e,t,r)=>t.includes(r))(0,i,n))return;if(s.default.isBemModifier(o)&&s.default.isBemBlock(n)){const s=new RegExp(n,"g");if(o.match(s).length<=1)return r.push(n),void t.push({className:n,rule:e})}if(s.default.isBemBlock(o)&&!s.default.isBemModifier(n)&&!s.default.isBemBlock(n))return r.push(n),void t.push({className:n,rule:e});if(s.default.isBemModifier(o))return r.push(n),void t.push({className:n,rule:e})}})}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,