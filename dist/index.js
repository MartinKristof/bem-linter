!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var r=t();for(var s in r)("object"==typeof exports?exports:e)[s]=r[s]}}(window,function(){return function(e){var t={};function r(s){if(t[s])return t[s].exports;var o=t[s]={i:s,l:!1,exports:{}};return e[s].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(s,o,function(t){return e[t]}.bind(null,o));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(1),o=r(3);t.preprocess=((e,r)=>(e.stylesheet.rules=t.process(e),r())),t.process=(e=>new s.default(e.stylesheet.rules).resolve()),t.processLint=(e=>(e.stylesheet.rules=t.process(e),o.lint(e))),t.name="BEM"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(2);class o{constructor(e){this.rules=e}resolve(){let e=[];return this.rules.forEach(t=>{if(o.isNotMediaQuery(t)&&o.isRule(t)){this.flattenRules([t]).map(t=>{e.push(this.getRuleWithBemDeclarations(t))})}else t.rules=this.flattenRules(t.rules),t.rules=t.rules.map(e=>this.getRuleWithBemDeclarations(e)),e.push(t)}),e}flattenRules(e){let t=[];return e?(e.forEach(e=>{e.selectors&&e.selectors.forEach(r=>{const s={type:e.type,selectors:[r],declarations:e.declarations,position:e.position};t.push(s)})}),t):t}static isNotMediaQuery(e){return"media"!=e.type}static isRule(e){return"rule"==e.type}getRuleWithBemDeclarations(e){const t=[];if(e.selectors.forEach(e=>{o.isCssClass(e)&&(e=o.getLastPartOfCssClass(e),t.push(e))}),t.length<1)return e;const r=s.default.parse(t[0]);return r?(e.declarations=e.declarations.concat(r.map(e=>({type:"declaration",property:"x-should",value:`match '${e}'`}))),e):e}static isCssClass(e){return e.match(/(\.\S+)/g)}static getLastPartOfCssClass(e){return"."+e.split(".").filter(Boolean).pop()}}t.default=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{static parse(e){let t=[];return t=s.getParts(e,t,s.isBemBlock(e),s.getBlockParam),t=s.getParts(e,t,s.isBemModifier(e),s.getModifierParam)}static getParts(e,t,r,s){if(!r)return t;return e.split(".").filter(Boolean).forEach(e=>{(e=s(e))&&-1===t.indexOf(e)&&t.push(e)}),t}static getBlockParam(e){const t=/\S+?(?=__)/g;return e.match(t)&&"."+e.match(t)[0]+" *"}static getModifierParam(e){const t=/\S+?(?=--)/g;return e.match(t)&&"."+e.match(t)[0]}static isBemBlock(e){return!!e.match(/\w+__\w+/g)}static isBemModifier(e){return!!e.match(/\w+--\w+/g)}}t.default=s},function(e,t,r){"use strict";function s(e,t,r){"rule"===e.type&&(t.push(e.selectors[0]),e.declarations.forEach(e=>{if("x-should"===e.property){let s=e.value.match(/(?=\.)(.*)(?=')/g)[0].match(/(\.\w+)/g);s[0]&&t.indexOf(s[0])&&-1===r.indexOf(s[0])&&r.push(s[0])}}))}Object.defineProperty(t,"__esModule",{value:!0}),t.lint=function(e){let t=[],r=[];return e.stylesheet.rules.forEach(e=>{s(e,t,r),"media"===e.type&&e.rules.forEach(e=>{s(e,t,r)})}),r.filter(e=>t.indexOf(e)<0)}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,